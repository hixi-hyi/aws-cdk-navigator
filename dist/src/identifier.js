"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Identifier = void 0;
const strings_1 = require("./strings");
class Identifier {
    constructor(stacks) {
        this.stacks = new strings_1.Strings(stacks);
        this.constructs = new strings_1.Strings([]);
    }
    copy() {
        const id = new Identifier(this.stacks.asStrings());
        id.constructs = this.constructs.copy();
        return id;
    }
    get parent() {
        const id = this.copy();
        id.constructs.pop();
        return id;
    }
    child(value) {
        const id = this.copy();
        id.constructs.push(value);
        return id;
    }
    scope(value, callback) {
        callback(this.child(value));
    }
    get stackName() {
        return this.stacks.toPascalCase();
    }
    get constructName() {
        const constructs = this.constructs.asStrings();
        return constructs[constructs.length - 1];
    }
    exportName(...values) {
        const value = new strings_1.Strings(values);
        return `${this.stacks.toPascalCase()}:${this.constructs.toPascalCase()}:${value.toPascalCase()}`;
    }
    get all() {
        return new strings_1.Strings([...this.stacks.asStrings(), ...this.constructs.asStrings()]);
    }
    get pascalName() {
        return this.all.toPascalCase();
    }
    get camelName() {
        return this.all.toCamelCase();
    }
    get snakeName() {
        return this.all.toSnakeCase();
    }
    get kebabName() {
        return this.all.toKebabCase();
    }
    get dotName() {
        return this.all.toDotCase();
    }
    get slashName() {
        return this.all.toSlashCase();
    }
    getStacks() {
        return this.stacks.copy();
    }
    getConstructs() {
        return this.constructs.copy();
    }
}
exports.Identifier = Identifier;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpZmllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pZGVudGlmaWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUFvQztBQUVwQyxNQUFhLFVBQVU7SUFJckIsWUFBWSxNQUFnQjtRQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksaUJBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksaUJBQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU0sSUFBSTtRQUNULE1BQU0sRUFBRSxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNuRCxFQUFFLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkMsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBVyxNQUFNO1FBQ2YsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQWE7UUFDeEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFhLEVBQUUsUUFBa0M7UUFDNUQsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBVyxTQUFTO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3RCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDL0MsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sVUFBVSxDQUFDLEdBQUcsTUFBZ0I7UUFDbkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7SUFDbkcsQ0FBQztJQUVELElBQVksR0FBRztRQUNiLE9BQU8sSUFBSSxpQkFBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVNLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVNLGFBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hDLENBQUM7Q0FDRjtBQWhGRCxnQ0FnRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdHJpbmdzIH0gZnJvbSAnLi9zdHJpbmdzJztcblxuZXhwb3J0IGNsYXNzIElkZW50aWZpZXIge1xuICBwcml2YXRlIHN0YWNrczogU3RyaW5ncztcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RzOiBTdHJpbmdzO1xuXG4gIGNvbnN0cnVjdG9yKHN0YWNrczogc3RyaW5nW10pIHtcbiAgICB0aGlzLnN0YWNrcyA9IG5ldyBTdHJpbmdzKHN0YWNrcyk7XG4gICAgdGhpcy5jb25zdHJ1Y3RzID0gbmV3IFN0cmluZ3MoW10pO1xuICB9XG5cbiAgcHVibGljIGNvcHkoKTogSWRlbnRpZmllciB7XG4gICAgY29uc3QgaWQgPSBuZXcgSWRlbnRpZmllcih0aGlzLnN0YWNrcy5hc1N0cmluZ3MoKSk7XG4gICAgaWQuY29uc3RydWN0cyA9IHRoaXMuY29uc3RydWN0cy5jb3B5KCk7XG4gICAgcmV0dXJuIGlkO1xuICB9XG5cbiAgcHVibGljIGdldCBwYXJlbnQoKTogSWRlbnRpZmllciB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmNvcHkoKTtcbiAgICBpZC5jb25zdHJ1Y3RzLnBvcCgpO1xuICAgIHJldHVybiBpZDtcbiAgfVxuXG4gIHB1YmxpYyBjaGlsZCh2YWx1ZTogc3RyaW5nKTogSWRlbnRpZmllciB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmNvcHkoKTtcbiAgICBpZC5jb25zdHJ1Y3RzLnB1c2godmFsdWUpO1xuICAgIHJldHVybiBpZDtcbiAgfVxuXG4gIHB1YmxpYyBzY29wZSh2YWx1ZTogc3RyaW5nLCBjYWxsYmFjazogKGlkOiBJZGVudGlmaWVyKSA9PiB2b2lkKSB7XG4gICAgY2FsbGJhY2sodGhpcy5jaGlsZCh2YWx1ZSkpO1xuICB9XG5cbiAgcHVibGljIGdldCBzdGFja05hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zdGFja3MudG9QYXNjYWxDYXNlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNvbnN0cnVjdE5hbWUoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb25zdHJ1Y3RzID0gdGhpcy5jb25zdHJ1Y3RzLmFzU3RyaW5ncygpO1xuICAgIHJldHVybiBjb25zdHJ1Y3RzW2NvbnN0cnVjdHMubGVuZ3RoIC0gMV07XG4gIH1cblxuICBwdWJsaWMgZXhwb3J0TmFtZSguLi52YWx1ZXM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICBjb25zdCB2YWx1ZSA9IG5ldyBTdHJpbmdzKHZhbHVlcyk7XG4gICAgcmV0dXJuIGAke3RoaXMuc3RhY2tzLnRvUGFzY2FsQ2FzZSgpfToke3RoaXMuY29uc3RydWN0cy50b1Bhc2NhbENhc2UoKX06JHt2YWx1ZS50b1Bhc2NhbENhc2UoKX1gO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgYWxsKCk6IFN0cmluZ3Mge1xuICAgIHJldHVybiBuZXcgU3RyaW5ncyhbLi4udGhpcy5zdGFja3MuYXNTdHJpbmdzKCksIC4uLnRoaXMuY29uc3RydWN0cy5hc1N0cmluZ3MoKV0pO1xuICB9XG5cbiAgcHVibGljIGdldCBwYXNjYWxOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYWxsLnRvUGFzY2FsQ2FzZSgpO1xuICB9XG5cbiAgcHVibGljIGdldCBjYW1lbE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hbGwudG9DYW1lbENhc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc25ha2VOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYWxsLnRvU25ha2VDYXNlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGtlYmFiTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmFsbC50b0tlYmFiQ2FzZSgpO1xuICB9XG5cbiAgcHVibGljIGdldCBkb3ROYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYWxsLnRvRG90Q2FzZSgpO1xuICB9XG5cbiAgcHVibGljIGdldCBzbGFzaE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hbGwudG9TbGFzaENhc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGFja3MoKTogU3RyaW5ncyB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2tzLmNvcHkoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb25zdHJ1Y3RzKCk6IFN0cmluZ3Mge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdHMuY29weSgpO1xuICB9XG59XG4iXX0=